//
//  HomeInteractorTests.swift
//  SpaceOdyssey
//
//  Created by Martin Lukacs on 19/09/2018.
//  Copyright (c) 2018 martin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import SpaceOdyssey
import Quick
import Nimble
import PromiseKit

class HomeInteractorTests: QuickSpec {
    
    override func spec() {
        describe("HomeInteractor tests") {
            
            // MARK: Subject under test
            
            var sut: HomeInteractor!
            
            beforeSuite {
                LaunchesNetworkInjector.networkManager = LaunchesNetworkManagerMock()
                setupHomeInteractor()
            }
            
            // MARK: Test setup
            
            func setupHomeInteractor() {
                sut = HomeInteractor()
            }
            
            // MARK: Test doubles
            
            class HomePresentationLogicSpy: HomePresentationLogic {
<<<<<<< HEAD
=======

>>>>>>> develop
                var presentFetchHomeDataCalled = false
                
                func presentFetchHomeData(response: Home.FetchHomeLaunches.Response) {
                    presentFetchHomeDataCalled = true
                }
<<<<<<< HEAD
=======
                
                func presentFetchHomeSortedData(response: Home.FetchHomeLaunches.Response) {
                    
                }
>>>>>>> develop
            }
            
            // MARK: Tests
            
            context("Set Up Home view") {
                
                it("Sould call the presentFetchChartsViews function") {
                    let spy = HomePresentationLogicSpy()
                    let spyWorker = sut.worker.launchesDataManager as! LaunchesNetworkManagerMock
                    sut.presenter = spy
<<<<<<< HEAD
                    let request = Home.FetchHomeLaunches.Request()
=======
                    let request = Home.FetchHomeLaunches.Request(type: 0)
>>>>>>> develop
                    
                    sut.fetchHomeLaunches(request: request)
                    expect(spy.presentFetchHomeDataCalled).toEventually(beTrue())
                    expect(spyWorker.getLaunchesCalled).to(beTrue())
                }
            }
        }
    }
}
