//
//  LaunchViewController.swift
//  SpaceOdyssey
//
//  Created by Martin Lukacs on 23/09/2018.
//  Copyright (c) 2018 martin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LaunchDisplayLogic: class {
  func displayLaunch(viewModel: LaunchPage.GetLaunch.ViewModel)
}

class LaunchViewController: UIViewController, LaunchDisplayLogic {
  var interactor: LaunchBusinessLogic?
  var router: (NSObjectProtocol & LaunchRoutingLogic & LaunchDataPassing)?

    @IBOutlet weak var lblTitle: UILabel!
    // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = LaunchInteractor()
    let presenter = LaunchPresenter()
    let router = LaunchRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
  }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        getLaunch()
    }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func getLaunch() {
    let request = LaunchPage.GetLaunch.Request()
    interactor?.getLaunch(request: request)
  }
  
  func displayLaunch(viewModel: LaunchPage.GetLaunch.ViewModel) {
   lblTitle.text = viewModel.displayedLaunch.title
    title = viewModel.displayedLaunch.title
  }
}


//
//let smallVideoPlayerViewController = AVPlayerViewController()
//
//@IBOutlet weak var videoView: UIView!
//
//override func viewDidLoad() {
//    super.viewDidLoad()
//    
//    let myFileManager = FileManager.default
//    let mainBundle = Bundle.main
//    let resourcesPath = mainBundle.resourcePath!
//    
//    guard let allItemsInTheBundle = try? myFileManager.contentsOfDirectory(atPath: resourcesPath) else {
//        return
//    }
//    
//    let videoName = "test"
//    
//    let videoPath = Bundle.main.path(forResource: videoName, ofType: "mp4")
//    let videoUrl = URL(fileURLWithPath: videoPath!)
//    
//    smallVideoPlayerViewController.showsPlaybackControls = false
//    smallVideoPlayerViewController.player = AVPlayer(url: videoUrl)
//    
//    videoView.addSubview(smallVideoPlayerViewController.view)
//    
//    smallVideoPlayerViewController.view.frame = videoView.frame
//    
//    smallVideoPlayerViewController.player?.play()
//}
//...
//
//smallVideoPlayerViewController.view.frame = videoView.bounds
//The reason is because videoView.frame includes the origin in its superview which you don't want. videoView.bounds is just the size with an origin of 0,0.
//
//Of course you might want to go further set the auto-resizing mask to keep the video player frame the same like this:
//
//smallVideoPlayerViewController.view.autoresizingMask = [.flexibleWidth, .flexibleHeight]
