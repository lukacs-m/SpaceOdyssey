//
//  HomeInteractor.swift
//  SpaceOdyssey
//
//  Created by Martin Lukacs on 19/09/2018.
//  Copyright (c) 2018 martin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import PromiseKit

protocol HomeBusinessLogic {
    func fetchHomeLaunches(request: Home.FetchHomeLaunches.Request)
    func fetchHomeSortedLaunches(request: Home.FetchHomeLaunches.Request)
     func fetchSearchLaunches(request: Home.SearchLaunches.Request)
}

protocol HomeDataStore {
    var filteredLaunches: [Launch]? { get }
}

final class HomeInteractor: HomeBusinessLogic, HomeDataStore {
    
    var presenter: HomePresentationLogic?
    var worker = HomeWorker()
    var launches: [Launch]?
    var filteredLaunches: [Launch]?
    var searchText = ""
    var typeOfLaunches = 0
    
    // MARK: Fetches the launches from space x api
    
    func fetchHomeLaunches(request: Home.FetchHomeLaunches.Request) {
        
        var response: Home.FetchHomeLaunches.Response!
//        let debugMode = EnvironmentVariables.spaceOdyssey_verbose_level.value == "verbose" ? true : false
        let debugMode = false
        
        firstly {
            worker.launchesDataManager.getLaunches(debugMode)
        }.done { launches in
            self.launches = launches
            self.setFilteredLaunches(launches)
            response = Home.FetchHomeLaunches.Response(launches: self.filteredLaunches, error: nil)
        }.catch { error in
            response = Home.FetchHomeLaunches.Response(launches: nil, error: LaunchErrors.couldNotLoadLaunches(error: error.localizedDescription))
        }.finally {
            self.presenter?.presentFetchHomeData(response: response)
        }
    }
    
    func fetchHomeSortedLaunches(request: Home.FetchHomeLaunches.Request) {
        guard let launches = self.launches else { return }
        typeOfLaunches = request.type
        setFilteredLaunches(launches)
        let response = Home.FetchHomeLaunches.Response(launches: filteredLaunches, error: nil)
        self.presenter?.presentFetchHomeSortedData(response: response)
    }
    
    func fetchSearchLaunches(request: Home.SearchLaunches.Request) {
        guard let launches = self.launches else { return }
        searchText = request.searchWord
        setFilteredLaunches(launches)
        let response = Home.FetchHomeLaunches.Response(launches: filteredLaunches, error: nil)
        self.presenter?.presentFetchHomeSortedData(response: response)
    }

    private func setFilteredLaunches(_ launches: [Launch]) {
        filteredLaunches = typeOfLaunches == 0 ? launches.filter { $0.upcoming == false } : launches.filter { $0.upcoming == true }
        guard !searchText.isEmpty, let currentLaunches = filteredLaunches else { return }
        filteredLaunches = currentLaunches.filter { $0.missionName.lowercased().contains(searchText.lowercased()) }
    }
}
